I"é<p>Time series forecasting occurs when you make scientific predictions based on historical time stamped data. 
It involves building models through historical analysis and using them to make observations and drive future strategic decision-making.</p>

<p><br />
<br /></p>

<p>Code can be viewed at following github page:
<br />
<a href=" https://github.com/krystianwarda/Sales-forecasting">
https://github.com/krystianwarda/Sales-forecasting</a>
<br /></p>

<h3 id="data-cleaning">Data cleaning</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train_data['date'] = pd.to_datetime(X_train_data['date'], format='%d%b%Y')


#merging the sales values with the features dataframe
variables = list(X_train_data.columns.values)
variables = variables[2:]
products = X_train_data.key.unique()

X_train_data[variables] = X_train_data[variables].apply(pd.to_numeric)
X_train_data["sales"] = ""


for row in y_train_data.itertuples():
    X_train_data.loc[((X_train_data['key']==row.key) &amp; (X_train_data['date'] == row.date)), 'sales'] = row.y
    
    
#Checking the merg
display(X_train_data.head())
</code></pre></div></div>

<h3 id="analyzing-the-sales-data">Analyzing the sales data</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train_plot = X_train_data.copy()
uniqueValues = X_train_plot['key'].unique()

fig = go.Figure()
for unique in uniqueValues:
    temp_df_plot = X_train_plot[(X_train_plot['key'] == unique)]
    
    fig.add_trace(go.Scatter(x=temp_df_plot['date'],
                             y=temp_df_plot['sales'],
                             mode='lines+markers',
                             name=str(unique),
                             visible="legendonly"))
fig.update_layout(title="Try Clicking on the Legend Items!")

fig.show()  
</code></pre></div></div>

<h4 id="comparing-data-from-2016-to-one-from-2017">Comparing data from 2016 to one from 2017</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start_date_train = np.datetime64('2016-01-01')
end_date_train = np.datetime64('2016-12-31')
start_date_test = np.datetime64('2017-01-01')
end_date_test = np.datetime64('2017-12-31')
 
train = X_train_data.loc[(X_train_data['date'] &gt; start_date_train) &amp; (X_train_data['date'] &lt;= end_date_train)]
test = X_train_data.loc[(X_train_data['date'] &gt; start_date_test) &amp; (X_train_data['date'] &lt;= end_date_test)]

train = train.fillna(train.mean())
test = test.fillna(test.mean())

uniqueValues = test['key'].unique()
fig2 = go.Figure()
for unique in uniqueValues:
    temp_train = train[(train['key'] == unique)]    
    temp_test = test[(test['key'] == unique)]
    fig2.add_trace(go.Scatter(x=temp_test['date'].dt.month,
                             y=temp_test['sales'],
                             mode='markers+lines',
                             name='actual 2017:' + str(unique),
                             visible="legendonly",
                             legendgroup=str(unique)))
    fig2.add_trace(go.Scatter(x=temp_train['date'].dt.month,
                             y=temp_train['sales'],
                             mode='markers+lines',
                             name='naive prediction- 2016:' + str(unique),
                             visible="legendonly",
                             legendgroup=str(unique)))
    
fig2.update_layout(title="Try Clicking on the Legend Items!")
fig2.show()
</code></pre></div></div>
:ET